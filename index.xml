<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>d3bo</title><link>/</link><description>Recent content on d3bo</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright (c) 2023 Hyas</copyright><lastBuildDate>Thu, 07 Sep 2023 16:33:54 +0200</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Heap 3</title><link>/ctf/picoctf/binaryexplotation/heap3/</link><pubDate>Mon, 14 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/heap3/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #define FLAGSIZE_MAX 64 // Create struct typedef struct { char a[10]; char b[10]; char c[10]; char flag[5]; } object; int num_allocs; object *x; void check_win() { if(!</description></item><item><title>VNE</title><link>/ctf/picoctf/binaryexplotation/vne/</link><pubDate>Sat, 12 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/vne/</guid><description>Para este reto picoctf proporciona unas credenciales de ssh.
En /home/ctf-player hay un binario de root con permisos SUID y con permisos de ejecuci칩n para todo el mundo, eso significa que cualquier persona puede ejecutarlo como root</description></item><item><title>Server Status</title><link>/ctf/nohacknoctf/binaryexploitation/server_status/</link><pubDate>Fri, 11 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/nohacknoctf/binaryexploitation/server_status/</guid><description>Para este reto se proporcionaban credenciales de ssh.
hacker@88110e7a3727:~$ ./server_status === Server Status Monitor v1.0 === System diagnostic tool with root privileges Running with elevated privileges (UID: 0, GID: 0) Initializing.</description></item><item><title>babyrop</title><link>/ctf/nohacknoctf/binaryexploitation/babyrop01/</link><pubDate>Thu, 10 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/nohacknoctf/binaryexploitation/babyrop01/</guid><description>Analysis Main function bool main(EVP_PKEY_CTX *param_1) { bool bVar1; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined8 local_20; int local_c; init(param_1); local_38 = 0; local_30 = 0; local_28 = 0; local_20 = 0; puts(&amp;#34;What\&amp;#39;s your name?</description></item><item><title>Hijacking</title><link>/ctf/picoctf/binaryexplotation/hijacking/</link><pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/hijacking/</guid><description>Para este reto pico da unas credenciales para entrar a ssh
El usuario picoctf tiene permisos para ejecutar .server.py como root sin contrase침a</description></item><item><title>Picker IV</title><link>/ctf/picoctf/binaryexplotation/pickeriv/</link><pubDate>Tue, 08 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/pickeriv/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;signal.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; void print_segf_message(){ printf(&amp;#34;Segfault triggered! Exiting.\n&amp;#34;); sleep(15); exit(SIGSEGV); } int win() { FILE *fptr; char c; printf(&amp;#34;You won!</description></item><item><title>babygame01</title><link>/ctf/picoctf/binaryexplotation/babygame01/</link><pubDate>Mon, 07 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/babygame01/</guid><description>En este challenge no se proporciona c칩digo
Renombrar variables y entender el c칩digo main undefined4 main(void) { int iVar1; undefined4 uVar2; int in_GS_OFFSET; int local_aac; int local_aa8; char local_aa4; undefined local_aa0 [2700]; int local_14; undefined *local_10; local_10 = &amp;amp;stack0x00000004; local_14 = *(int *)(in_GS_OFFSET + 0x14); init_player(&amp;amp;local_aac); init_map(local_aa0,&amp;amp;local_aac); print_map(local_aa0,&amp;amp;local_aac); signal(2,sigint_handler); do { do { iVar1 = getchar(); move_player(&amp;amp;local_aac,(int)(char)iVar1,local_aa0) ; print_map(local_aa0,&amp;amp;local_aac); } while (local_aac !</description></item><item><title>RPS</title><link>/ctf/picoctf/binaryexplotation/rps/</link><pubDate>Sun, 06 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/rps/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdbool.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/time.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #define WAIT 60 static const char* flag = &amp;#34;[REDACTED]&amp;#34;; char* hands[3] = {&amp;#34;rock&amp;#34;, &amp;#34;paper&amp;#34;, &amp;#34;scissors&amp;#34;}; char* loses[3] = {&amp;#34;paper&amp;#34;, &amp;#34;scissors&amp;#34;, &amp;#34;rock&amp;#34;}; int wins = 0; int tgetinput(char *input, unsigned int l) { fd_set input_set; struct timeval timeout; int ready_for_reading = 0; int read_bytes = 0; if( l &amp;lt;= 0 ) { printf(&amp;#34;&amp;#39;l&amp;#39; for tgetinput must be greater than 0\n&amp;#34;); return -2; } /* Empty the FD Set */ FD_ZERO(&amp;amp;input_set ); /* Listen to the input descriptor */ FD_SET(STDIN_FILENO, &amp;amp;input_set); /* Waiting for some seconds */ timeout.</description></item><item><title>Flag Leak</title><link>/ctf/picoctf/binaryexplotation/flag_leak/</link><pubDate>Sat, 05 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/flag_leak/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;wchar.h&amp;gt; #include &amp;lt;locale.h&amp;gt; #define BUFSIZE 64 #define FLAGSIZE 64 void readflag(char* buf, size_t len) { FILE *f = fopen(&amp;#34;flag.</description></item><item><title>two-sum</title><link>/ctf/picoctf/binaryexplotation/two-sum/</link><pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/two-sum/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; static int addIntOvf(int result, int a, int b) { result = a + b; if(a &amp;gt; 0 &amp;amp;&amp;amp; b &amp;gt; 0 &amp;amp;&amp;amp; result &amp;lt; 0) return -1; if(a &amp;lt; 0 &amp;amp;&amp;amp; b &amp;lt; 0 &amp;amp;&amp;amp; result &amp;gt; 0) return -1; return 0; } int main() { int num1, num2, sum; FILE *flag; char c; printf(&amp;#34;n1 &amp;gt; n1 + n2 OR n2 &amp;gt; n1 + n2 \n&amp;#34;); fflush(stdout); printf(&amp;#34;What two positive numbers can make this possible: \n&amp;#34;); fflush(stdout); if (scanf(&amp;#34;%d&amp;#34;, &amp;amp;num1) &amp;amp;&amp;amp; scanf(&amp;#34;%d&amp;#34;, &amp;amp;num2)) { printf(&amp;#34;You entered %d and %d\n&amp;#34;, num1, num2); fflush(stdout); sum = num1 + num2; if (addIntOvf(sum, num1, num2) == 0) { printf(&amp;#34;No overflow\n&amp;#34;); fflush(stdout); exit(0); } else if (addIntOvf(sum, num1, num2) == -1) { printf(&amp;#34;You have an integer overflow\n&amp;#34;); fflush(stdout); } if (num1 &amp;gt; 0 || num2 &amp;gt; 0) { flag = fopen(&amp;#34;flag.</description></item></channel></rss>