<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>d3bo</title><link>/</link><description>Recent content on d3bo</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright (c) 2023 Hyas</copyright><lastBuildDate>Thu, 07 Sep 2023 16:33:54 +0200</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>two-sum</title><link>/ctf/picoctf/binaryexplotation/two-sum/</link><pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/two-sum/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; static int addIntOvf(int result, int a, int b) { result = a + b; if(a &amp;gt; 0 &amp;amp;&amp;amp; b &amp;gt; 0 &amp;amp;&amp;amp; result &amp;lt; 0) return -1; if(a &amp;lt; 0 &amp;amp;&amp;amp; b &amp;lt; 0 &amp;amp;&amp;amp; result &amp;gt; 0) return -1; return 0; } int main() { int num1, num2, sum; FILE *flag; char c; printf(&amp;#34;n1 &amp;gt; n1 + n2 OR n2 &amp;gt; n1 + n2 \n&amp;#34;); fflush(stdout); printf(&amp;#34;What two positive numbers can make this possible: \n&amp;#34;); fflush(stdout); if (scanf(&amp;#34;%d&amp;#34;, &amp;amp;num1) &amp;amp;&amp;amp; scanf(&amp;#34;%d&amp;#34;, &amp;amp;num2)) { printf(&amp;#34;You entered %d and %d\n&amp;#34;, num1, num2); fflush(stdout); sum = num1 + num2; if (addIntOvf(sum, num1, num2) == 0) { printf(&amp;#34;No overflow\n&amp;#34;); fflush(stdout); exit(0); } else if (addIntOvf(sum, num1, num2) == -1) { printf(&amp;#34;You have an integer overflow\n&amp;#34;); fflush(stdout); } if (num1 &amp;gt; 0 || num2 &amp;gt; 0) { flag = fopen(&amp;#34;flag.</description></item><item><title>Heap 1</title><link>/ctf/picoctf/binaryexplotation/heap1/</link><pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/heap1/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #define FLAGSIZE_MAX 64 // amount of memory allocated for input_data #define INPUT_DATA_SIZE 5 // amount of memory allocated for safe_var #define SAFE_VAR_SIZE 5 int num_allocs; char *safe_var; char *input_data; void check_win() { if (!</description></item><item><title>Stonks</title><link>/ctf/picoctf/binaryexplotation/stonks/</link><pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/stonks/</guid><description>#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;time.h&amp;gt; #define FLAG_BUFFER 128 #define MAX_SYM_LEN 4 typedef struct Stonks { int shares; char symbol[MAX_SYM_LEN + 1]; struct Stonks *next; } Stonk; typedef struct Portfolios { int money; Stonk *head; } Portfolio; int view_portfolio(Portfolio *p) { if (!</description></item><item><title>Format strings 1</title><link>/ctf/picoctf/binaryexplotation/format-strings-1/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/format-strings-1/</guid><description>#include &amp;lt;stdio.h&amp;gt; int main() { char buf[1024]; char secret1[64]; char flag[64]; char secret2[64]; // Read in first secret menu item FILE *fd = fopen(&amp;#34;secret-menu-item-1.</description></item><item><title>Restaurant</title><link>/ctf/hackthebox/pwn/restaurant/</link><pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate><guid>/ctf/hackthebox/pwn/restaurant/</guid><description>leak libc &amp;amp; ret2libc</description></item><item><title>Debugging Interface</title><link>/ctf/hackthebox/hardware/debugging-interface/</link><pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate><guid>/ctf/hackthebox/hardware/debugging-interface/</guid><description>We accessed the embedded device&amp;rsquo;s asynchronous serial debugging interface while it was operational and captured some messages that were being transmitted over it.</description></item><item><title>Execute</title><link>/ctf/hackthebox/pwn/execute/</link><pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate><guid>/ctf/hackthebox/pwn/execute/</guid><description>#!/usr/bin/env python3 from pwn import * e = ELF(&amp;#34;./execute_patched&amp;#34;) HOST = &amp;#34;83.136.249.253&amp;#34; PORT = 56508 context.binary = e context.terminal = [&amp;#39;tmux&amp;#39;, &amp;#39;splitw&amp;#39;, &amp;#39;-h&amp;#39;] gdb_script = &amp;#39;&amp;#39;&amp;#39; b main continue &amp;#39;&amp;#39;&amp;#39; def conn(): if args.</description></item><item><title>PDFy</title><link>/ctf/hackthebox/web/pdfy/</link><pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate><guid>/ctf/hackthebox/web/pdfy/</guid><description>La web del reto es simple, consiste en que nos pide una url y la transforma en pdf
Al descargar el pdf y analizarlo con exiftool, vemos el programa que se está usando para transformar las webs en pdf</description></item><item><title>The Needle</title><link>/ctf/hackthebox/hardware/the-needle/</link><pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate><guid>/ctf/hackthebox/hardware/the-needle/</guid><description>As a part of our SDLC process, we&amp;rsquo;ve got our firmware ready for security testing. Can you help us by performing a security assessment?</description></item><item><title>Buffer Overflow 1</title><link>/ctf/picoctf/binaryexplotation/bof1/</link><pubDate>Sat, 10 Feb 2024 12:16:22 +0100</pubDate><guid>/ctf/picoctf/binaryexplotation/bof1/</guid><description>Material / Información Dominio: saturn.picoctf.net Puerto: 63667 (Puede variar) Binario (vuln) Script en c del binario (vuln.c) #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.</description></item></channel></rss>