<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>d3bo</title><link>/</link><description>Recent content on d3bo</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright (c) 2023 Hyas</copyright><lastBuildDate>Thu, 07 Sep 2023 16:33:54 +0200</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Buffer Overflow 2</title><link>/ctf/picoctf/binaryexplotation/bufferoverflow-2/</link><pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/bufferoverflow-2/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe def conn(): if args.LOCAL: r = process([exe.path]) if args.</description></item><item><title>Buffer Overflow 0</title><link>/ctf/picoctf/binaryexplotation/bufferoverflow-0/</link><pubDate>Thu, 24 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/bufferoverflow-0/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe def conn(): if args.LOCAL: r = process([exe.path]) if args.</description></item><item><title>Buffer Overflow 3</title><link>/ctf/picoctf/binaryexplotation/bufferoverflow3/</link><pubDate>Thu, 24 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/bufferoverflow3/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./vuln_patched_patched&amp;#34;, checksec=False) context.binary = exe context.terminal = [&amp;#34;alacritty&amp;#34;, &amp;#34;-e&amp;#34;] context.log_level = &amp;#39;warn&amp;#39; def conn(): if args.</description></item><item><title>ropfu</title><link>/ctf/picoctf/binaryexplotation/ropfu/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/ropfu/</guid><description>#!/usr/bin/env python3 from pwn import * from pwnlib.util.net import AddressFamily exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe gdb_script = &amp;#39;&amp;#39;&amp;#39; b main b *0x80583b9 continue &amp;#39;&amp;#39;&amp;#39; context.</description></item><item><title>Bonus Points</title><link>/ctf/fcsc/2021/bonuspoints/</link><pubDate>Mon, 21 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/fcsc/2021/bonuspoints/</guid><description>Para este reto se proporciona un binario
undefined8 main(void) { uint __seed; int iVar1; char local_1a [10]; int local_10; uint local_c; local_c = 0; __seed = getpid(); srand(__seed); iVar1 = rand(); local_c = iVar1 % 100; puts(&amp;#34;Hello, here you can get some bonus points for the competition.</description></item><item><title>bofbof</title><link>/ctf/fcsc/2021/bofbof/</link><pubDate>Sun, 20 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/fcsc/2021/bofbof/</guid><description>Para este reto se proporciona un binario
undefined8 main(void) { char local_38 [40]; long local_10; local_10 = 0x4141414141414141; printf(&amp;#34;Comment est votre blanquette ?</description></item><item><title>Format strings 3</title><link>/ctf/picoctf/binaryexplotation/format-strings-3/</link><pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/format-strings-3/</guid><description>#include &amp;lt;stdio.h&amp;gt; #define MAX_STRINGS 32 char *normal_string = &amp;#34;/bin/sh&amp;#34;; void setup() { setvbuf(stdin, NULL, _IONBF, 0); setvbuf(stdout, NULL, _IONBF, 0); setvbuf(stderr, NULL, _IONBF, 0); } void hello() { puts(&amp;#34;Howdy gamers!</description></item><item><title>Echo Valley</title><link>/ctf/picoctf/binaryexplotation/echovalley/</link><pubDate>Fri, 18 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/echovalley/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; void print_flag() { char buf[32]; FILE *file = fopen(&amp;#34;/home/valley/flag.txt&amp;#34;, &amp;#34;r&amp;#34;); if (file == NULL) { perror(&amp;#34;Failed to open flag file&amp;#34;); exit(EXIT_FAILURE); } fgets(buf, sizeof(buf), file); printf(&amp;#34;Congrats!</description></item><item><title>Format strings 2</title><link>/ctf/picoctf/binaryexplotation/format-strings-2/</link><pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/format-strings-2/</guid><description>#include &amp;lt;stdio.h&amp;gt; int sus = 0x21737573; int main() { char buf[1024]; char flag[64]; printf(&amp;#34;You don&amp;#39;t have what it takes. Only a true wizard could change my suspicions.</description></item><item><title>Reto 07</title><link>/ctf/caixabank/2025/202507/</link><pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/caixabank/2025/202507/</guid><description>Para el reto se proporciona un binario
int __fastcall main(int argc, const char **argv, const char **envp) { double v3; // xmm0_8 char nptr[8]; // [rsp+0h] [rbp-70h] BYREF __int64 v6; // [rsp+8h] [rbp-68h] __int64 v7; // [rsp+10h] [rbp-60h] __int64 v8; // [rsp+18h] [rbp-58h] __int64 v9; // [rsp+20h] [rbp-50h] __int64 v10; // [rsp+28h] [rbp-48h] __int64 v11; // [rsp+30h] [rbp-40h] __int64 v12; // [rsp+38h] [rbp-38h] double v13; // [rsp+48h] [rbp-28h] unsigned int v14; // [rsp+54h] [rbp-1Ch] double v15; // [rsp+58h] [rbp-18h] double v16; // [rsp+60h] [rbp-10h] unsigned int v17; // [rsp+6Ch] [rbp-4h] *(_QWORD *)nptr = 0LL; v6 = 0LL; v7 = 0LL; v8 = 0LL; v9 = 0LL; v10 = 0LL; v11 = 0LL; v12 = 0LL; v17 = 0; v16 = 0.</description></item></channel></rss>