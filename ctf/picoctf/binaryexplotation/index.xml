<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Binary Explotation on d3bo</title><link>/ctf/picoctf/binaryexplotation/</link><description>Recent content in Binary Explotation on d3bo</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright (c) 2023 Hyas</copyright><lastBuildDate>Mon, 08 Jan 2024 12:16:22 +0100</lastBuildDate><atom:link href="/ctf/picoctf/binaryexplotation/index.xml" rel="self" type="application/rss+xml"/><item><title>Buffer Overflow 0</title><link>/ctf/picoctf/binaryexplotation/bufferoverflow-0/</link><pubDate>Thu, 24 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/bufferoverflow-0/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe def conn(): if args.LOCAL: r = process([exe.path]) if args.</description></item><item><title>Buffer Overflow 3</title><link>/ctf/picoctf/binaryexplotation/bufferoverflow3/</link><pubDate>Thu, 24 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/bufferoverflow3/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./vuln_patched_patched&amp;#34;, checksec=False) context.binary = exe context.terminal = [&amp;#34;alacritty&amp;#34;, &amp;#34;-e&amp;#34;] context.log_level = &amp;#39;warn&amp;#39; def conn(): if args.</description></item><item><title>ropfu</title><link>/ctf/picoctf/binaryexplotation/ropfu/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/ropfu/</guid><description>#!/usr/bin/env python3 from pwn import * from pwnlib.util.net import AddressFamily exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe gdb_script = &amp;#39;&amp;#39;&amp;#39; b main b *0x80583b9 continue &amp;#39;&amp;#39;&amp;#39; context.</description></item><item><title>Format strings 3</title><link>/ctf/picoctf/binaryexplotation/format-strings-3/</link><pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/format-strings-3/</guid><description>#include &amp;lt;stdio.h&amp;gt; #define MAX_STRINGS 32 char *normal_string = &amp;#34;/bin/sh&amp;#34;; void setup() { setvbuf(stdin, NULL, _IONBF, 0); setvbuf(stdout, NULL, _IONBF, 0); setvbuf(stderr, NULL, _IONBF, 0); } void hello() { puts(&amp;#34;Howdy gamers!</description></item><item><title>Echo Valley</title><link>/ctf/picoctf/binaryexplotation/echovalley/</link><pubDate>Fri, 18 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/echovalley/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; void print_flag() { char buf[32]; FILE *file = fopen(&amp;#34;/home/valley/flag.txt&amp;#34;, &amp;#34;r&amp;#34;); if (file == NULL) { perror(&amp;#34;Failed to open flag file&amp;#34;); exit(EXIT_FAILURE); } fgets(buf, sizeof(buf), file); printf(&amp;#34;Congrats!</description></item><item><title>Format strings 2</title><link>/ctf/picoctf/binaryexplotation/format-strings-2/</link><pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/format-strings-2/</guid><description>#include &amp;lt;stdio.h&amp;gt; int sus = 0x21737573; int main() { char buf[1024]; char flag[64]; printf(&amp;#34;You don&amp;#39;t have what it takes. Only a true wizard could change my suspicions.</description></item><item><title>Heap 3</title><link>/ctf/picoctf/binaryexplotation/heap3/</link><pubDate>Mon, 14 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/heap3/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #define FLAGSIZE_MAX 64 // Create struct typedef struct { char a[10]; char b[10]; char c[10]; char flag[5]; } object; int num_allocs; object *x; void check_win() { if(!</description></item><item><title>VNE</title><link>/ctf/picoctf/binaryexplotation/vne/</link><pubDate>Sat, 12 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/vne/</guid><description>Para este reto picoctf proporciona unas credenciales de ssh.
En /home/ctf-player hay un binario de root con permisos SUID y con permisos de ejecución para todo el mundo, eso significa que cualquier persona puede ejecutarlo como root</description></item><item><title>Hijacking</title><link>/ctf/picoctf/binaryexplotation/hijacking/</link><pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/hijacking/</guid><description>Para este reto pico da unas credenciales para entrar a ssh
El usuario picoctf tiene permisos para ejecutar .server.py como root sin contraseña</description></item><item><title>Picker IV</title><link>/ctf/picoctf/binaryexplotation/pickeriv/</link><pubDate>Tue, 08 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/picoctf/binaryexplotation/pickeriv/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;signal.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; void print_segf_message(){ printf(&amp;#34;Segfault triggered! Exiting.\n&amp;#34;); sleep(15); exit(SIGSEGV); } int win() { FILE *fptr; char c; printf(&amp;#34;You won!</description></item></channel></rss>