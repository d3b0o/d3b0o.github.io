<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pwn on d3bo</title><link>/tags/pwn/</link><description>Recent content in pwn on d3bo</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright (c) 2023 Hyas</copyright><lastBuildDate>Thu, 13 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title>Integer Overflow</title><link>/blog/integer-overflow/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>/blog/integer-overflow/</guid><description>Se puede usar este script para poner en práctica la explicación
/*gcc main.c -o main*/ #include &amp;lt;stdio.h&amp;gt; int main() { int a, b, result; printf(&amp;#34;&amp;gt; &amp;#34;); scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;a, &amp;amp;b); result = a + b; printf(&amp;#34;%d + %d = %d\n&amp;#34;, a, b, result); return 0; } Los números (int) en c se guardan en registros de 32bits Sabiendo esto se puede sacar la conclusión de que el número más grande que se puede poner es 2147483647, ya que en binario 2147483647 son 31 &amp;lsquo;1&amp;rsquo; y el último bit es un 0, ya que es un número positivo.</description></item></channel></rss>